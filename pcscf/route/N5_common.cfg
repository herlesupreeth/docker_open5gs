#!ifdef WITH_N5

# 5G VoNR N5 Policy Authorization PATCH request
route[N5_PATCH_REQ] {
	xlog("L_INFO", "IMS: Received 183/200 inside orig_initial_reply\n");

	# Retrieve the IP/Port of UE
	$var(orig_id_ue_ip) = $fU;
	$var(ue_sip_ip_addr) = $sht(user_sip_ips=>$var(orig_id_ue_ip));
	xlog("L_INFO", "IP for UE  $var(orig_id_ue_ip) is: $var(ue_sip_ip_addr)\n");

	$var(orig_ue_port) = $fU;
	$var(ue_port_sip) = $sht(user_sip_ports=>$var(orig_ue_port));
	xlog("L_INFO", "IP for UE  $var(orig_ue_port) is: $var(ue_port_sip)\n");

	# Retrieve SDP Connection Info and Media Port for UE
	$var(sdp_id_ue) = $fU;
	$var(ue_sdp_ip) = $sht(user_sdps_ip=>$var(sdp_id_ue));
	xlog("L_INFO", "SDP IP for UE with MSISDN $var(sdp_id_ue) is: $var(ue_sdp_ip)\n");

	$var(sdp_id_ue_port) = $fU;
	$var(ue_sdp_port) = $sht(user_sdps_port=>$var(sdp_id_ue_port));
	xlog("L_INFO", "SDP Port for UE with MSISDN $var(sdp_id_ue_port) is: $var(ue_sdp_port)\n");

	$var(sdp_id_ue_rtcp_port) = $fU;
	$var(ue_sdp_rtcp_port) = $sht(user_sdps_rtcp_port=>$var(sdp_id_ue_rtcp_port));
	xlog("L_INFO", "SDP Port for UE with MSISDN $var(sdp_id_ue_rtcp_port) is: $var(ue_sdp_rtcp_port)\n");

	# Retrieve SDP Connection Info from SDP Answer
	$var(sdp_answ_ip) = $sdp(c:ip);
	$var(sdp_answ_port) = $sdp(m0:rtp:port);
	$var(sdp_answ_rtcp_port) = $sdp(m0:rtcp:port);
	$var(sdp_answ_codec) = $(rb{line.sw,a=rtpmap}{s.select,1, });
	xlog("L_INFO", "SDP Answer connection Info is: $var(sdp_answ_ip), RTP port $var(sdp_answ_port), RTCP Port $var(sdp_answ_rtcp_port) and codec is $var(sdp_answ_codec)\n");

	# Retrieve AppSession Id
	$var(user_id_inv_rep) = $fU;
	$var(user_appsess_inv_rep) = $sht(user_data=>$var(user_id_inv_rep));
	xlog("L_INFO", "Stored AppSession Id for user $var(user_id_inv_rep): $var(user_appsess_inv_rep)\n");

	xlog("L_INFO","Preparing PATCH N5 Message for SDP Answer\n");

	$var(events) = '[]';
	$var(medComponents) = '{}';
	$var(medSubComps) = '{}';
	$var(evSubsc) = '{}';
	$var(payload) = '{}';

	# Set afAppId and dnn in payload
	jansson_set("string", "afAppId", "+g.3gpp.icsi-ref=\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\"", "$var(payload)");
	jansson_set("string", "dnn", "ims", "$var(payload)");

	# Set media components
	jansson_set("integer", "medCompN", 1, "$var(medComp)");
	jansson_set("string", "qosReference", "qosVoNR", "$var(medComp)");
	jansson_set("string", "medType", "AUDIO", "$var(medComp)");
	jansson_set("array", "codecs", "[\"downlink\\n$var(sdp_answ_codec)\\n\", \"uplink\\n$var(sdp_answ_codec)\\n\"]", "$var(medComp)");

	# RTP
	jansson_set("integer", "fNum", 1, "$var(medSubComp1)");
	jansson_set("array", "fDescs", "[\"permit out 17 from $var(sdp_answ_ip) $var(sdp_answ_port) to $var(ue_sdp_ip) $var(ue_sdp_port)\", \"permit in 17 from $var(ue_sdp_ip) $var(ue_sdp_port) to $var(sdp_answ_ip) $var(sdp_answ_port)\"]", "$var(medSubComp1)");
	jansson_set("string", "fStatus", "ENABLED", "$var(medSubComp1)");
	jansson_set("string", "marBwDl", "5000 Kbps", "$var(medSubComp1)");
	jansson_set("string", "marBwUl", "3000 Kbps", "$var(medSubComp1)");
	jansson_set("string", "flowUsage", "NO_INFO", "$var(medSubComp1)");


	# RTCP
	jansson_set("integer", "fNum", 2, "$var(medSubComp2)");
	jansson_set("array", "fDescs", "[\"permit out 17 from $var(sdp_answ_ip) $var(sdp_answ_rtcp_port) to $var(ue_sdp_ip) $var(ue_sdp_rtcp_port)\", \"permit in 17 from $var(ue_sdp_ip) $var(ue_sdp_rtcp_port) to $var(sdp_answ_ip) $var(sdp_answ_rtcp_port)\"]", "$var(medSubComp2)");
	jansson_set("string", "fStatus", "ENABLED", "$var(medSubComp2)");
	jansson_set("string", "marBwDl", "5000 Kbps", "$var(medSubComp2)");
	jansson_set("string", "marBwUl", "3000 Kbps", "$var(medSubComp2)");
	jansson_set("string", "flowUsage", "RTCP", "$var(medSubComp2)");

	# Merging the flows under MediaSubComponent
	jansson_set("obj", "0", "$var(medSubComp1)", "$var(medSubComps)");
	jansson_set("obj", "1", "$var(medSubComp2)", "$var(medSubComps)");
	jansson_set("obj", "medSubComps", "$var(medSubComps)", "$var(medComp)");

	jansson_set("obj", "0", "$var(medComp)", "$var(medComponents)");
	jansson_set("obj", "medComponents", "$var(medComponents)", "$var(payload)");

	xlog("L_INFO","DEBUG: Set evSubsc\n");

	# Set evSubsc
	jansson_set("string", "event", "QOS_NOTIF", "$var(event1)");
	jansson_set("string", "notifMethod", "PERIODIC", "$var(event1)");
	jansson_append("obj", "", "$var(event1)", "$var(events)");
	jansson_set("string", "event", "ANI_REPORT", "$var(event2)");
	jansson_set("string", "notifMethod", "ONE_TIME", "$var(event2)");
	jansson_append("obj", "", "$var(event2)", "$var(events)");
	jansson_set("array", "events", "$var(events)", "$var(evSubsc)");

	jansson_set("obj", "evSubsc", "$var(evSubsc)", "$var(payload)");

	# Set other parameters in payload
	jansson_set("string", "notifUri", "http://PCSCF_IP:7777", "$var(payload)");
	jansson_set("string", "sponStatus", "SPONSOR_DISABLED", "$var(payload)");
	jansson_set("string", "gpsi", "msisdn-$fU", "$var(payload)");
	jansson_set("string", "suppFeat", "4", "$var(payload)");
	jansson_set("string", "ueIpv4", "$var(ue_sip_ip_addr)", "$var(payload)");

	# Assemble the final JSON request
	jansson_set("obj", "ascReqData", "$var(payload)", "$var(json_request)");

	xlog("L_INFO","Set headers for the HTTP2 Request\n");
	# Set headers
	$var(time_now)=$_s($timef(%a, %d %b %Y %H:%M:%S %Z));
	xlog("L_INFO", "Today is $var(time_now)\n");

	# Set Content-type to application/merge-patch+json for compatibility with RFC7386 for JSON PATCH/Merge
	$var(headers) = "Content-Type: application/merge-patch+json\r\n";
	$var(headers) = $var(headers) + "3gpp-sbi-discovery-target-nf-type: NRF\r\n";
	$var(headers) = $var(headers) + "accept: application/json\r\n";
	$var(headers) = $var(headers) + "accept: application/problem+json\r\n";
	$var(headers) = $var(headers) + "3gpp-sbi-max-rsp-time: 10000\r\n";
	$var(headers) = $var(headers) + "3gpp-sbi-discovery-service-names: npcf-policyauthorization\r\n";
	$var(headers) = $var(headers) + "3gpp-sbi-sender-timestamp: " + $var(time_now);

	xlog("L_INFO","Sending the request to PCF\n");
	# Send the request to PCF
	http_client_request_v2pk("PATCH", "http://PCF_IP:7777/npcf-policyauthorization/v1/app-sessions/$var(user_appsess_inv_rep)", "$var(json_request)", "$var(headers)", "$var(result)" );
	switch ($rc) {
		case 200:
			xlog("L_INFO", "N5 QoS Session modification success - reason code: $rc\n");
			xlog("L_INFO", "HTTP results: $var(result)\n");
			xlog("L_INFO", "HTTP response: $rc\n");
			xlog("L_INFO", "cURL Response: $curlerror(error)\n");
			xlog("L_INFO", "Location Header header: $httprhdr(location)\n");
			break;
		default:
			xlog("L_ERR", "N5 QoS Session modification faild - reason code: $rc\n");
			send_reply("412", "MOC N5 QoS Session modify faild");
			exit;
	}
}
#!endif
