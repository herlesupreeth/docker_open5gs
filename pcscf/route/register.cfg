######################################################################
# Route for handling Registrations:
######################################################################
route[REGISTER] {
	# Provide some statistics
        if ($sht(a=>$ci::start_time) == $null || $sht(a=>$ci::start_time) == 0) {
            $sht(a=>$ci::start_time) = $TV(Sn);
        }
	xnotice("PCSCF REGISTER: \n Destination URI: $du\n Request URI: $ru\n");
	xnotice("Source IP and Port: ($si:$sp)\n Route-URI: $route_uri\n");
	xnotice("Received IP and Port: ($Ri:$Rp)\n");
	xnotice("Contact header: $ct\n");

	# Strip Transport from RURI:
	$ru = $(ru{re.subst,/;transport=[A-Za-z]*//g});

	if (is_present_hf("Contact")) {
		pcscf_save_pending("location");
	} else {
		send_reply("403", "No contact header");
		exit;
	}

### N5 Request create and terminate
    xlog("L_ALERT","Checking if its a Registration and not a De-Reg for $fu\n");  
    $var(reg_exp) =   $expires(min);
    xlog("L_ALERT","Checking Expire  $fu and it is : $var(reg_exp)\n");   
     
     # tying a dirty workaround to make it only excute after IPSec tunnel to prevent double excution 
    	if ($expires(min) != 0 && is_present_hf("Security-Verify")) {
     route(REGISTER_N5_Req);
     }

    if ($expires(min) == 0 ) {
       xlog("L_ALERT","delete N5 Session for $fu due to de-register\n");  
       route(REG_N5_TERMINATE);
     }

#!ifdef WITH_IPSEC
	$sht(ipsec_clients=>$(ct{nameaddr.uri})) = $null;
	if ($hdr(Security-Client) =~ ".*ipsec-3gpp.*") {
		$sht(ipsec_clients=>$(ct{nameaddr.uri})) = 1;
	}
#!endif

	# Strip additional Tags from RURI:
	if ($rU == $null)
		$ru = "sip:"+$rd;
	else
		$ru = "sip:"+$rU+"@"+$rd;

#!ifdef WITH_RX
	if ($expires(min) != 0) {
		xlog("L_DBG","Subscribing to signalling bearer status\n");

		Rx_AAR_Register("REG_AAR_REPLY", "location");
		switch ($retcode) {
			case -1:
				# There was an error sending the AAR-Request:
				xlog("L_ERR", "Diameter: AAR failed on subscription to signalling\n");
				send_reply("403", "Can't register to QoS for signalling");
				exit;
				break;
			case 0:
				# We are waiting for an async reply, just exit here.
				exit;
				break;
			case 1:
				# We did not need to send AAR, so just continue as normal
				route(REGISTER_CONTINUE);
				break;
		}
	} else {
		# Proceed with Registering:
		route(REGISTER_CONTINUE);
	}
	exit;
}

route[REG_AAR_REPLY] {
	switch ($avp(s:aar_return_code)) {
		case 1:
			xlog("L_DBG", "Diameter: AAR success on subscription to signalling\n");
			break;
		default:
			xlog("L_ERR", "Diameter: AAR failed on subscription to signalling\n");
			send_reply("403", "Can't register to QoS for signalling");
			exit;
	}
	# Proceed with Registering:
	route(REGISTER_CONTINUE);
}

route[REGISTER_CONTINUE] {
#!endif
	append_hf("Path: <sip:term@HOSTNAME;lr>\r\n");

	remove_hf("Supported");
	append_hf("Supported: path\r\n");
	remove_hf("Require");
	append_hf("Require: path\r\n");

	# Add a visited Network-ID-Header:
	if (is_present_hf("P-Visited-Network-ID")) {
		$var(new_hdr) = "NETWORKNAME, "+$hdr(P-Visited-Network-ID);
		append_hf("P-Visited-Network-ID: $var(new_hdr)\r\n");
	} else {
		append_hf("P-Visited-Network-ID: NETWORKNAME\r\n");
	}
#!ifdef WITH_SBC
#!ifndef WITH_SBC_CALL
	t_on_failure("SBC_failure");
	# Choose an SBC to send the call to:
	if (!ds_select_dst(DISPATCHER_LIST_SBC, "4")) {
		send_reply("503", "Service Unavailable (SBC failure)");
		exit;
	}
#!else
	t_on_failure("REGISTER_failure");
#!endif
#!else
	t_on_failure("REGISTER_failure");
#!endif
	t_on_reply("REGISTER_reply");
	# Forward request:
	route(RELAY);
	exit;
}

# Replies for REGISTER requests:
######################################################################
onreply_route[REGISTER_reply]
{
#!ifdef WITH_IMS_HDR_CACHE
	if (is_present_hf("Service-Route")) {
		$sht(serviceroutes=>$ci) = $hdr(Service-Route);
	} else {
		if ($sht(serviceroutes=>$ci) != $null) {
			append_hf("Service-Route: $sht(serviceroutes=>$ci)\r\n");
			msg_apply_changes();
		}
	}
	if (is_present_hf("P-Associated-URI")) {
		$sht(associateduris=>$ci) = $hdr(P-Associated-URI);
	} else {
		if ($sht(associateduris=>$ci) != $null) {
			append_hf("P-Associated-URI: $sht(associateduris=>$ci)\r\n");
			msg_apply_changes();
		}
	}
#!endif

	if (t_check_status("200")) {
#!ifdef WITH_IPBLOCK
		$sht(failedauth=>$T_req($si)) = $null;
#!endif
		pcscf_save("location");

#!ifdef WITH_NATPING
#!ifdef WITH_PING_UDP
		#if ($T_req($pr) == "udp") {
		if ($pr == "udp") {
			sht_lock("natping=>natpinglock");
			if ($(T_req($hdr(Security-Client))) =~ ".*ipsec-3gpp.*") {
				$var(sec_client) = $(T_req($hdr(Security-Client)));
				xnotice("Security-Client=$var(sec_client)\n");
				$var(sc_port_c) = $(var(sec_client){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sc_port_c)\n");
				$var(sc_port_s) = $(var(sec_client){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sc_port_s)\n");
				$var(ouri) = "sip:"+$T_req($si)+":"+$var(sc_port_s);
			} else {
				$var(ouri) = "sip:"+$T_req($si)+":"+$T_req($sp);
			}
			$sht(natping=>$var(ouri)) = $(T_req($ct){nameaddr.uri});
			sht_unlock("natping=>natpinglock");

			sht_lock("natpingfrom=>natpingfromlock");
			if ($(T_req($hdr(Security-Verify))) =~ ".*ipsec-3gpp.*") {
				$var(sec_verify) = $(T_req($hdr(Security-Verify)));
				xnotice("Security-Verify=$var(sec_verify)\n");
				$var(sv_port_c) = $(var(sec_verify){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sv_port_c)\n");
				$var(sv_port_s) = $(var(sec_verify){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sv_port_s)\n");

				$sht(natpingfrom=>$var(ouri)) = "udp:"+$T_req($Ri)+":"+$var(sv_port_c);
			} else {
				$sht(natpingfrom=>$var(ouri)) = "udp:"+$T_req($Ri)+":"+$T_req($Rp);
			}
			sht_unlock("natpingfrom=>natpingfromlock");
		}
#!endif
#!ifdef WITH_PING_TCP
		#if ($T_req($pr) == "tcp") {
		if ($pr == "tcp") {
			sht_lock("natping=>natpinglock");
			if ($(T_req($hdr(Security-Client))) =~ ".*ipsec-3gpp.*") {
				$var(sec_client) = $(T_req($hdr(Security-Client)));
				xnotice("Security-Client=$var(sec_client)\n");
				$var(sc_port_c) = $(var(sec_client){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sc_port_c)\n");
				$var(sc_port_s) = $(var(sec_client){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sc_port_s)\n");
				$var(ouri) = "sip:"+$T_req($si)+":"+$var(sc_port_s)+";transport=tcp";
			} else {
				$var(ouri) = "sip:"+$T_req($si)+":"+$T_req($sp)+";transport=tcp";
			}
			$sht(natping=>$var(ouri)) = $(T_req($ct){nameaddr.uri});
			sht_unlock("natping=>natpinglock");

			sht_lock("natpingfrom=>natpingfromlock");
			if ($(T_req($hdr(Security-Verify))) =~ ".*ipsec-3gpp.*") {
				$var(sec_verify) = $(T_req($hdr(Security-Verify)));
				xnotice("Security-Verify=$var(sec_verify)\n");
				$var(sv_port_c) = $(var(sec_verify){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sv_port_c)\n");
				$var(sv_port_s) = $(var(sec_verify){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sv_port_s)\n");

				$sht(natpingfrom=>$var(ouri)) = "tcp:"+$T_req($Ri)+":"+$var(sv_port_c);
			} else {
				$sht(natpingfrom=>$var(ouri)) = "tcp:"+$T_req($Ri)+":"+$T_req($Rp);
			}
			sht_unlock("natpingfrom=>natpingfromlock");
		}
#!endif
#!ifdef WITH_PING_TLS
		#if ($T_req($pr) == "tls") {
		if ($pr == "tls") {
			sht_lock("natping=>natpinglock");
			if ($(T_req($hdr(Security-Client))) =~ ".*ipsec-3gpp.*") {
				$var(sec_client) = $(T_req($hdr(Security-Client)));
				xnotice("Security-Client=$var(sec_client)\n");
				$var(sc_port_c) = $(var(sec_client){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sc_port_c)\n");
				$var(sc_port_s) = $(var(sec_client){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sc_port_s)\n");
				$var(ouri) = "sip:"+$T_req($si)+":"+$var(sc_port_s)+";transport=tls";
			} else {
				$var(ouri) = "sip:"+$T_req($si)+":"+$T_req($sp)+";transport=tls";
			}
			$sht(natping=>$var(ouri)) = $(T_req($ct){nameaddr.uri});
			sht_unlock("natping=>natpinglock");

			sht_lock("natpingfrom=>natpingfromlock");
			if ($(T_req($hdr(Security-Verify))) =~ ".*ipsec-3gpp.*") {
				$var(sec_verify) = $(T_req($hdr(Security-Verify)));
				xnotice("Security-Verify=$var(sec_verify)\n");
				$var(sv_port_c) = $(var(sec_verify){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sv_port_c)\n");
				$var(sv_port_s) = $(var(sec_verify){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sv_port_s)\n");

				$sht(natpingfrom=>$var(ouri)) = "tls:"+$T_req($Ri)+":"+$var(sv_port_c);
			} else {
				$sht(natpingfrom=>$var(ouri)) = "tls:"+$T_req($Ri)+":"+$T_req($Rp);
			}
			sht_unlock("natpingfrom=>natpingfromlock");
		}
#!endif
#!endif
		#update stats for register reply on success
		$var(start_secs) = $(sht(a=>$ci::start_time){s.select,0,.});
		$var(start_usecs) = $(sht(a=>$ci::start_time){s.select,1,.});
		$var(diff_secs) = $TV(s) - $var(start_secs);
		$var(diff_usecs) = $TV(u) - $var(start_usecs);
		$var(diff_ms) = $var(diff_secs)*1000 + ($var(diff_usecs)/1000);
		$sht(a=>$ci::start_time)=0;
		$var(stat_add) = "+" + $var(diff_ms);
		xlog("L_DBG", "REGISTER SUCCESS[$ci] took $var(stat_add)ms\n");
		update_stat("register_success", "+1");
		update_stat("register_time", "$var(stat_add)");
#!ifdef WITH_IPSEC
            ipsec_forward("location", IPSEC_FORWARD_FLAGS);
   	}
	else {
		if (t_check_status("401")) {
			if($(T_req($hdr(Security-Client))) != $null && ipsec_create("location", IPSEC_DELETE_UNUSED_TUNNELS)!=1) {
				send_reply("503", "Service Unavailable (Create ipsec failed)");
			}
			if ($sht(ipsec_clients=>$(T_req($ct){nameaddr.uri})) != $null) {
				$var(sec_client) = $(T_req($hdr(Security-Client)));
				xnotice("Security-Client=$var(sec_client)\n");
				$var(sc_port_c) = $(var(sec_client){re.subst,/.*port-c=([0-9]*).*$/\1/s});
				xnotice("port-c=$var(sc_port_c)\n");
				$var(sc_port_s) = $(var(sec_client){re.subst,/.*port-s=([0-9]*).*$/\1/s});
				xnotice("port-s=$var(sc_port_s)\n");
			}
			xnotice("Expires=$(T_req($expires(min)))\n");
			if (is_present_hf("WWW-Authenticate")) {
				# Remove ck and ik:
				$var(old_hdr) = $hdr(WWW-Authenticate);
				xnotice("Old header - WWW-Authenticate=$var(old_hdr)\n");
				remove_hf("WWW-Authenticate");
				$var(new_hdr) = $(hdr(WWW-Authenticate){re.subst,/(, *)?(ck|ik)=\"\w+\"//gi});
				if ($(var(new_hdr){s.len}) > 0) {
					append_hf("WWW-Authenticate: $var(new_hdr)\r\n");
				}
				xnotice("New header - WWW-Authenticate=$var(new_hdr)\n");
			}
        }
#!endif
    }
	exit;
}

# Negative replies to REGISTER requests:
######################################################################
failure_route[REGISTER_failure]
{

# Terminate N5 Session on Reg Failure

 	if (t_check_status("403|408|[5-6][0-9][0-9]")) {
         route(REG_N5_TERMINATE);
     }

#!ifdef WITH_IPBLOCK
	if (t_check_status("403|[5-6][0-9][0-9]")) {
		if ($sht(failedauth=>$si) != $null)
			$sht(failedauth=>$si) = $sht(failedauth=>$si) + 1;
		else
			$sht(failedauth=>$si) = 1;
		if ($sht(failedauth=>$si) > 10) {
			xlog("L_ALERT","ALERT: blocking $rm from $fu (IP:$si:$sp), more than 5 failed auth requests!\n");
			xlog("Blocking traffic from $si\n");
			$sht(ipban=>$si) = 1;
		}
                update_stat("register_failed", "+1");
	}
#!endif
	if (t_check_status("408")) {
		send_reply("504","Server Time-Out");
                update_stat("register_failed", "+1");
		exit;
	}
  
}





#############################################   
##### 5G Experemntal PCF N5 Interface  Reg ##
#############################################

route[REGISTER_N5_Req] 
{
   

    xlog("L_ALERT","its a Registration, starting N5 Auth for $fu\n"); 
        
    xlog("L_ALERT","DEBUG: Initialize empty arrays and objects\n");
### Initialize empty arrays and objects
  $var(events) = '[]';
  $var(medComponents) = '{}';
  $var(medSubComps) = '{}';
  $var(evSubsc) = '{}';
  $var(payload) = '{}';

### Set afAppId and dnn in payload
  jansson_set("string", "afAppId", "+g.3gpp.icsi-ref=\"urn%3Aurn-7%3A3gpp-service.ims.icsi.mmtel\"", "$var(payload)");  # adding a note that this could be improved in future to get the value SIP Header
  jansson_set("string", "dnn", "ims", "$var(payload)");

### Set medComponents
  jansson_set("integer", "medCompN", 0, "$var(medComp)");
  jansson_set("string", "qosReference", "qosVoNR", "$var(medComp)");  
  jansson_set("string", "medType", "CONTROL", "$var(medComp)");

  jansson_set("integer", "fNum", 0, "$var(medSubComp)");
  jansson_set("array", "fDescs", "[\"permit out ip from $RAi $RAp to $si $sp\", \"permit in ip from $si $sp to $RAi $RAp\"]", "$var(medSubComp)");
  jansson_set("string", "fStatus", "ENABLED", "$var(medSubComp)");  
  jansson_set("string", "flowUsage", "AF_SIGNALLING", "$var(medSubComp)");
#  jansson_set("string", "marBwDl", "5000 Kbps", "$var(medSubComp)");  
#  jansson_set("string", "marBwUl", "3000 Kbps", "$var(medSubComp)");
  jansson_set("obj", "0", "$var(medSubComp)", "$var(medSubComps)");
  jansson_set("obj", "medSubComps", "$var(medSubComps)", "$var(medComp)");
  
  jansson_set("obj", "0", "$var(medComp)", "$var(medComponents)");
  jansson_set("obj", "medComponents", "$var(medComponents)", "$var(payload)");

xlog("L_ALERT","DEBUG: Set evSubsc\n");

### Set evSubsc
  jansson_set("string", "event", "QOS_NOTIF", "$var(event1)");
  jansson_set("string", "notifMethod", "PERIODIC", "$var(event1)");  
  jansson_append("obj", "", "$var(event1)", "$var(events)");
  jansson_set("string", "event", "ANI_REPORT", "$var(event2)");
  jansson_set("string", "notifMethod", "ONE_TIME", "$var(event2)");
  jansson_append("obj", "", "$var(event2)", "$var(events)");
  jansson_set("array", "events", "$var(events)", "$var(evSubsc)");

  jansson_set("obj", "evSubsc", "$var(evSubsc)", "$var(payload)");

### Set other parameters in payload
  jansson_set("string", "notifUri", "http://172.22.0.21:8284", "$var(payload)");
  jansson_set("string", "sponStatus", "SPONSOR_DISABLED", "$var(payload)");
  jansson_set("string", "supi", "imsi-$au", "$var(payload)");
  jansson_set("string", "suppFeat", "2", "$var(payload)");
  jansson_set("string", "ueIpv4", "$si", "$var(payload)");

### Assemble the final JSON request
  jansson_set("obj", "ascReqData", "$var(payload)", "$var(json_request)");

    xlog("L_ALERT","DEBUG: Set headers for the HTTP2 Request\n");    
### Set headers    
    $var(time_now)=$_s($timef(%a, %d %b %Y %H:%M:%S %Z));
    xlog("L_ALERT", "Today is $var(time_now)\n");
     
    $var(headers) = "Content-Type: application/json\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-discovery-target-nf-type: NRF\r\n";
    $var(headers) = $var(headers) + "accept: application/json\r\n";
    $var(headers) = $var(headers) + "accept: application/problem+json\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-max-rsp-time: 10000\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-discovery-service-names: npcf-policyauthorization\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-sender-timestamp: " + $var(time_now);
    
    xlog("L_ALERT","DEBUG: Sending the request to PCF\n");    
### Send the request to PCF
    http_client_request_v2pk("POST", "http://172.22.0.27:7777/npcf-policyauthorization/v1/app-sessions", "$var(json_request)", "$var(headers)", "$var(result)" );
    xlog("L_ALERT", "HTTP response: $var(result)\n");
    xlog("L_ALERT", "response header: $curlerror(error)\n");
    xlog("L_ALERT", "response header: $var(response_code)\n");
    xlog("L_ALERT", "response header: $httprhdr(location)\n");


    xlog("L_ALERT","Saving AppSessionID to HTABLE\n"); 
# Now I will retrieve the AppSessionID out of the location Header it should be always at the end 
# Example URL: "http://172.22.0.27:7777/npcf-policyauthorization/v1/app-sessions/(someSessionID)"
    
# Firt store the url of the lcoation Header in var
    $var(url) = $httprhdr(location);
    
    # Get the length of the URL
    $var(len) = $(var(url){s.len});
    
    # Initialize the position variable to the length of the URL
    $var(pos) = $var(len);
    
    # Find the position of the last slash by iterating backwards
    while ($var(pos) > 0) {
      $var(pos) = $var(pos) - 1;
      if ($(var(url){s.substr,$var(pos),1}) == "/") {
          # We've found the last slash
          break;
      }
    }
    
# Extract the substring after the last slash
# now doing some magic
    $var(start_pos) = $var(pos) + 1;
    $var(end_pos) = $var(len) - $var(start_pos);
    $var(app_session) = $(var(url){s.substr,$var(start_pos),$var(end_pos)});
    
# now checking it on console if I got what I wanted :
    xlog("L_INFO", "AppSession for user $au is: $var(app_session)\n");

# now trying some way to store AppSession with the registred UE
    $var(user_id) = $au; # should get the user part of the registred UE

    # Store the AppSession in the hash table associated with the UE
    $sht(user_data=>$var(user_id)) = $var(app_session);
    xlog("L_INFO", "Stored AppSession for user $var(user_id): $var(app_session)\n");

#######
## Storing IMSI for later use :
######

    xlog("L_ALERT","Storing User IMSI to HTABLE for later use\n"); 
    $var(ue_imsi) = $au;
    
# now checking it on console if I got what I wanted :
    xlog("L_INFO", "IP for UE is: $var(ue_imsi)\n");

# now trying some way to store AppSession with the registred UE
    $var(ue_imsi_reg_ip) = $si; # should get the user part of the registred UE

    # Store the AppSession in the hash table associated with the UE
    $sht(user_ids=>$var(ue_imsi_reg_ip)) = $var(ue_imsi);
    xlog("L_INFO", "Stored IMSI for IP $var(ue_imsi_reg_ip) is: $var(ue_imsi)\n");
    
    # now contiue with Reg Proccess 

### N5 REQ Route END
}

###########################
## Terminating AppSession #
###########################
route[REG_N5_TERMINATE]
{
    xlog("L_ALERT","its a De-Registration for $fu, terminating N5 AppSession\n"); 
    # Retrieveing
    $var(user_id_dereg) = $fU; # User Part of the from Header to get the USER 
    $var(user_appsess_dereg) = $sht(user_data=>$var(user_id_dereg));
    xlog("L_INFO", "Terminating Stored AppSession for user $var(user_id_dereg): $var(user_appsess_dereg)\n");
    
    $var(headers) = "X-SIP-Status: De-Registration\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-discovery-target-nf-type: NRF\r\n";
    $var(headers) = $var(headers) + "accept: application/json\r\n";
    $var(headers) = $var(headers) + "accept: application/problem+json\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-max-rsp-time: 10000\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-discovery-service-names: npcf-policyauthorization\r\n";
    $var(headers) = $var(headers) + "3gpp-sbi-sender-timestamp: " + $var(time_now);
    
    http_client_request_v2pk("POST", "http://172.22.0.27:7777/npcf-policyauthorization/v1/app-sessions/$var(user_appsess_dereg)/delete", "$var(json_request)", "$var(headers)", "$var(result)" );
    xlog("Termination resuls: $var(result)\n");
    xlog("L_ALERT", "response header: $curlerror(error)\n");
    xlog("L_ALERT", "response header: $var(response_code)\n");
    xlog("L_ALERT", "response header: $httprhdr(location)\n");

}
